Futures:
    -Allow us to define work that may happen at some later time, possibly on another thread
    -Futurtes return a Try of whether or not the work was successfully completed

ExecutionContext:
    -To use a Future, you must provide a thread pool that the Future can use to perform the work
    -I can use an "implicit val" to declare it one time and automatically apply it to all usages within a scope

Timeout:
    -Futures can have a defined amount of time before they "time out", or fail because they have taken too long
        to do their work or be scheduled
    -Default timeout is 3 seconds
    -Scala has a nice DSL for creating such time-based values

Asynchronously using Futures:
    >>>val usdQuote = Future { 
        connection.getCurrentValue(USD)}
    >>>val chfQuote = Future {
        connection.getCurrentValue(CHF)}
    >>>val purchase = for {
        usd <- usdQuote
        chf <- chfQuote if isProfitable(usd, chf)
    } yield connection.buy(amount, chf)